<UserControl
	x:Class="reWASDUI.Views.Preferences.PreferencesOverlayMappings" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:buttons="clr-namespace:DiscSoft.NET.Common.View.Controls.Buttons;assembly=DiscSoft.NET.Common" xmlns:checkBoxes="clr-namespace:DiscSoft.NET.Common.View.Controls.CheckBoxes;assembly=DiscSoft.NET.Common" xmlns:comboBoxes="clr-namespace:DiscSoft.NET.Common.View.Controls.ComboBoxes;assembly=DiscSoft.NET.Common" xmlns:converters="clr-namespace:DiscSoft.NET.Common.Utils.Converters;assembly=DiscSoft.NET.Common" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:enums="clr-namespace:reWASDCommon.Infrastructure.Enums;assembly=reWASDCommon" xmlns:keyBindingsModel="clr-namespace:XBEliteWPF.Infrastructure.KeyBindingsModel;assembly=reWASDCommon" xmlns:l="clr-namespace:DiscSoft.NET.Common.Localization;assembly=DiscSoft.NET.Common" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:multiRangeSlider="clr-namespace:DiscSoft.NET.Common.View.Controls.MultiRangeSlider;assembly=DiscSoft.NET.Common" xmlns:recolorableImages="clr-namespace:DiscSoft.NET.Common.View.RecolorableImages;assembly=DiscSoft.NET.Common" xmlns:s="clr-namespace:DTEngine;assembly=DiscSoft.NET.Common" xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit" xmlns:controls="clr-namespace:reWASDUI.Controls" xmlns:converters2="clr-namespace:reWASDUI.Utils.Converters" xmlns:preferences="clr-namespace:reWASDUI.Views.Preferences"
	x:Name="ucPreferencesOverlayMappings">
	<FrameworkElement.Resources>
		<ResourceDictionary>
			<DataTemplate
				x:Key="MappingDescriptionsHotkeyCollectionDataTemplate"
				DataType="keyBindingsModel:SlotsHotkeyCollection">
				<FrameworkTemplate.Resources>
					<ResourceDictionary>
						<Style
							x:Key="{x:Type controls:ControllerComboBox}"
							BasedOn="{StaticResource {x:Type controls:ControllerComboBox}}"
							TargetType="{x:Type controls:ControllerComboBox}">
							<Setter
								Property="FrameworkElement.Margin"
								Value="0,0,5,0" />
							<Setter
								Property="controls:ControllerComboBox.ItemsSource"
								Value="{Binding ButtonsForSlotHotkey}" />
							<Setter
								Property="controls:ControllerComboBox.ControllerType"
								Value="{Binding FirstGamepadType}" />
							<Setter
								Property="FrameworkElement.MinWidth"
								Value="150" />
						</Style>
						<Style
							x:Key="{x:Type checkBoxes:FillCheckBox}"
							BasedOn="{StaticResource {x:Type checkBoxes:FillCheckBox}}"
							TargetType="{x:Type checkBoxes:FillCheckBox}">
							<Setter
								Property="FrameworkElement.Margin"
								Value="0,18,0,8" />
						</Style>
						<DataTemplate
							x:Key="{DataTemplateKey {x:Type enums:GamepadButton}}"
							DataType="{x:Type enums:GamepadButton}">
							<Grid
								FrameworkElement.MinHeight="20">
								<Grid.ColumnDefinitions>
									<ColumnDefinition
										ColumnDefinition.Width="Auto" />
									<ColumnDefinition
										ColumnDefinition.Width="*" />
								</Grid.ColumnDefinitions>
								<recolorableImages:RecolorableSVG
									FrameworkElement.Width="16"
									FrameworkElement.Height="16"
									IsColorShift="True">
									<recolorableImages:RecolorableSVG.Drawing>
										<MultiBinding
											Converter="{converters2:GamepadButtonAnnotationIconConverter}">
											<Binding />
											<Binding
												Path="DataContext.CurrentKeyValuePairMappingDescriptions.Value.ControllerTypes"
												RelativeSource="{RelativeSource FindAncestor, AncestorType=preferences:PreferencesOverlayMappings}" />
										</MultiBinding>
									</recolorableImages:RecolorableSVG.Drawing>
								</recolorableImages:RecolorableSVG>
								<TextBlock
									Grid.Column="1"
									FrameworkElement.Margin="8,0,0,0"
									FrameworkElement.VerticalAlignment="Center"
									FrameworkElement.Style="{DynamicResource DTBaseTextBlockStyle}">
									<TextBlock.Text>
										<MultiBinding
											Converter="{converters2:GamepadButtonDescriptionConverter}">
											<Binding />
											<Binding
												Path="DataContext.CurrentKeyValuePairMappingDescriptions.Value.ControllerTypes"
												RelativeSource="{RelativeSource FindAncestor, AncestorType=preferences:PreferencesOverlayMappings}" />
										</MultiBinding>
									</TextBlock.Text>
								</TextBlock>
							</Grid>
						</DataTemplate>
					</ResourceDictionary>
				</FrameworkTemplate.Resources>
				<StackPanel>
					<StackPanel>
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition
									ColumnDefinition.Width="*" />
								<ColumnDefinition
									ColumnDefinition.Width="*" />
								<ColumnDefinition
									ColumnDefinition.Width="*" />
							</Grid.ColumnDefinitions>
							<controls:ControllerComboBox
								x:Name="cmbSlot1Btn1"
								Grid.Column="0"
								SelectedItem="{Binding MappingDescriptionsOverlayAssociatedButtonCollection[0].ControllerBindingButtonSelectionObject}" />
							<controls:ControllerComboBox
								x:Name="cmbSlot1Btn2"
								Grid.Column="1"
								SelectedItem="{Binding MappingDescriptionsOverlayAssociatedButtonCollection[1].ControllerBindingButtonSelectionObject}" />
							<controls:ControllerComboBox
								x:Name="cmbSlot1Btn3"
								Grid.Column="2"
								FrameworkElement.Margin="0"
								SelectedItem="{Binding MappingDescriptionsOverlayAssociatedButtonCollection[2].ControllerBindingButtonSelectionObject}" />
						</Grid>
					</StackPanel>
				</StackPanel>
			</DataTemplate>
			<DataTemplate
				x:Key="MappingHotkeyCollectionDataTemplate"
				DataType="keyBindingsModel:SlotsHotkeyCollection">
				<FrameworkTemplate.Resources>
					<ResourceDictionary>
						<Style
							x:Key="{x:Type controls:ControllerComboBox}"
							BasedOn="{StaticResource {x:Type controls:ControllerComboBox}}"
							TargetType="{x:Type controls:ControllerComboBox}">
							<Setter
								Property="FrameworkElement.Margin"
								Value="0,0,5,0" />
							<Setter
								Property="controls:ControllerComboBox.ItemsSource"
								Value="{Binding ButtonsForSlotHotkey}" />
							<Setter
								Property="controls:ControllerComboBox.ControllerType"
								Value="{Binding FirstGamepadType}" />
							<Setter
								Property="FrameworkElement.MinWidth"
								Value="150" />
						</Style>
						<Style
							x:Key="{x:Type checkBoxes:FillCheckBox}"
							BasedOn="{StaticResource {x:Type checkBoxes:FillCheckBox}}"
							TargetType="{x:Type checkBoxes:FillCheckBox}">
							<Setter
								Property="FrameworkElement.Margin"
								Value="0,18,0,8" />
						</Style>
						<DataTemplate
							x:Key="{DataTemplateKey {x:Type enums:GamepadButton}}"
							DataType="{x:Type enums:GamepadButton}">
							<Grid
								FrameworkElement.MinHeight="20">
								<Grid.ColumnDefinitions>
									<ColumnDefinition
										ColumnDefinition.Width="Auto" />
									<ColumnDefinition
										ColumnDefinition.Width="*" />
								</Grid.ColumnDefinitions>
								<recolorableImages:RecolorableSVG
									FrameworkElement.Width="16"
									FrameworkElement.Height="16"
									IsColorShift="True">
									<recolorableImages:RecolorableSVG.Drawing>
										<MultiBinding
											Converter="{converters2:GamepadButtonAnnotationIconConverter}">
											<Binding />
											<Binding
												Path="DataContext.CurrentKeyValuePairMapping.Value.ControllerTypes"
												RelativeSource="{RelativeSource FindAncestor, AncestorType=preferences:PreferencesOverlayMappings}" />
										</MultiBinding>
									</recolorableImages:RecolorableSVG.Drawing>
								</recolorableImages:RecolorableSVG>
								<TextBlock
									Grid.Column="1"
									FrameworkElement.Margin="8,0,0,0"
									FrameworkElement.VerticalAlignment="Center"
									FrameworkElement.Style="{DynamicResource DTBaseTextBlockStyle}">
									<TextBlock.Text>
										<MultiBinding
											Converter="{converters2:GamepadButtonDescriptionConverter}">
											<Binding />
											<Binding
												Path="DataContext.CurrentKeyValuePairMapping.Value.ControllerTypes"
												RelativeSource="{RelativeSource FindAncestor, AncestorType=preferences:PreferencesOverlayMappings}" />
										</MultiBinding>
									</TextBlock.Text>
								</TextBlock>
							</Grid>
						</DataTemplate>
					</ResourceDictionary>
				</FrameworkTemplate.Resources>
				<StackPanel>
					<StackPanel>
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition
									ColumnDefinition.Width="*" />
								<ColumnDefinition
									ColumnDefinition.Width="*" />
								<ColumnDefinition
									ColumnDefinition.Width="*" />
							</Grid.ColumnDefinitions>
							<controls:ControllerComboBox
								x:Name="cmbSlot1Btn1"
								Grid.Column="0"
								SelectedItem="{Binding MappingOverlayAssociatedButtonCollection[0].ControllerBindingButtonSelectionObject}" />
							<controls:ControllerComboBox
								x:Name="cmbSlot1Btn2"
								Grid.Column="1"
								SelectedItem="{Binding MappingOverlayAssociatedButtonCollection[1].ControllerBindingButtonSelectionObject}" />
							<controls:ControllerComboBox
								x:Name="cmbSlot1Btn3"
								Grid.Column="2"
								FrameworkElement.Margin="0"
								SelectedItem="{Binding MappingOverlayAssociatedButtonCollection[2].ControllerBindingButtonSelectionObject}" />
						</Grid>
					</StackPanel>
				</StackPanel>
			</DataTemplate>
		</ResourceDictionary>
	</FrameworkElement.Resources>
	<StackPanel>
		<checkBoxes:FillCheckBox
			FrameworkElement.Name="ShowMappingsCb"
			FrameworkElement.Margin="0,18,0,0"
			FrameworkElement.HorizontalAlignment="Left"
			FrameworkElement.VerticalAlignment="Top"
			ContentControl.Content="{l:Translate {x:Static s:StringConsts.STR_SHOW_OVERLAY_MAPPINGS}}"
			IsChecked="{Binding ShowMappings}"
			UIElement.IsEnabled="{Binding ParentVM.ShowOverlay}"
			x:Name="ShowMappingsCb" />
		<StackPanel
			FrameworkElement.Margin="17,0,0,0">
			<Expander
				FrameworkElement.Name="ExpandMappingOverlayHotkeys"
				FrameworkElement.Margin="0,17,0,0"
				HeaderedContentControl.Header="{l:Translate {x:Static s:StringConsts.STR_OVERLAY_MAPPINGS_ENABLE_HOTKEY}}"
				UIElement.IsEnabled="{Binding ShowMappingsAndOverlay}"
				IsExpanded="{Binding ExpandMappingOverlayHotkeys}"
				x:Name="ExpandMappingOverlayHotkeys">
				<StackPanel
					FrameworkElement.Margin="17,0,0,0">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition
								ColumnDefinition.Width="*" />
							<ColumnDefinition
								ColumnDefinition.Width="Auto" />
						</Grid.ColumnDefinitions>
						<StackPanel>
							<comboBoxes:ColoredComboBox
								Name="cmbDevicesMapping"
								FrameworkElement.Margin="0,8,0,0"
								ItemsControl.ItemTemplate="{DynamicResource ControllerNameSlotsHotkeyCollectionDataTemplate}"
								UIElement.IsEnabled="{Binding ShowMappingsAndOverlay}"
								ItemsControl.ItemsSource="{Binding ParentVM.FilteredGamepadsSlotHotkeyCollections}"
								SelectedItem="{Binding CurrentKeyValuePairMapping}"
								WatermarkItemNotSelected="{l:Translate {x:Static s:StringConsts.STR_NO_DEVICE_DETECTED}}" />
							<ContentControl
								FrameworkElement.Margin="0,8,0,0"
								ContentControl.ContentTemplate="{StaticResource MappingHotkeyCollectionDataTemplate}"
								ContentControl.Content="{Binding CurrentKeyValuePairMapping.Value}"
								UIElement.IsEnabled="{Binding ShowMappingsAndOverlay}" />
						</StackPanel>
						<buttons:SVGButton
							Name="btnRemoveDevice"
							Grid.Column="1"
							FrameworkElement.VerticalAlignment="Top"
							Drawing="{DynamicResource Remove}"
							Control.Foreground="{DynamicResource CreamBrush}"
							HighlightedForeground="#FFFFFFFF"
							PressedForeground="{DynamicResource CreamBrush}"
							SVGMargin="3,14,3,3"
							ButtonBase.Command="{Binding RemoveMappingEntryCommand}"
							UIElement.IsEnabled="{Binding ShowMappingsAndOverlay}"
							ToolTip="{l:Translate {x:Static s:StringConsts.STR_REMOVE_DEVICE_FROM_LIST}}" />
					</Grid>
				</StackPanel>
			</Expander>
			<Expander
				FrameworkElement.Name="ExpandMappingDescriptionsHotkeys"
				FrameworkElement.Margin="0,10,0,0"
				HeaderedContentControl.Header="{l:Translate {x:Static s:StringConsts.STR_OVERLAY_MAPPINGS_DESCRIPTIONS_ENABLE_HOTKEY}}"
				UIElement.IsEnabled="{Binding ShowMappingsAndOverlay}"
				IsExpanded="{Binding ExpandMappingDescriptionsHotkeys}"
				x:Name="ExpandMappingDescriptionsHotkeys">
				<StackPanel
					FrameworkElement.Margin="17,0,0,0">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition
								ColumnDefinition.Width="*" />
							<ColumnDefinition
								ColumnDefinition.Width="Auto" />
						</Grid.ColumnDefinitions>
						<StackPanel>
							<comboBoxes:ColoredComboBox
								FrameworkElement.Name="MappingDescriptionsCB"
								FrameworkElement.Margin="0,8,0,0"
								ItemsControl.ItemTemplate="{DynamicResource ControllerNameSlotsHotkeyCollectionDataTemplate}"
								UIElement.IsEnabled="{Binding ShowMappingsAndOverlay}"
								ItemsControl.ItemsSource="{Binding ParentVM.FilteredGamepadsSlotHotkeyCollections}"
								SelectedItem="{Binding CurrentKeyValuePairMappingDescriptions}"
								WatermarkItemNotSelected="{l:Translate {x:Static s:StringConsts.STR_NO_DEVICE_DETECTED}}"
								x:Name="MappingDescriptionsCB" />
							<ContentControl
								FrameworkElement.Margin="0,8,0,0"
								ContentControl.ContentTemplate="{DynamicResource MappingDescriptionsHotkeyCollectionDataTemplate}"
								ContentControl.Content="{Binding CurrentKeyValuePairMappingDescriptions.Value}"
								UIElement.IsEnabled="{Binding ShowMappingsAndOverlay}" />
						</StackPanel>
						<buttons:SVGButton
							Name="btnRemoveDeviceDescription"
							Grid.Column="1"
							FrameworkElement.VerticalAlignment="Top"
							Drawing="{DynamicResource Remove}"
							Control.Foreground="{DynamicResource CreamBrush}"
							HighlightedForeground="#FFFFFFFF"
							PressedForeground="{DynamicResource CreamBrush}"
							SVGMargin="3,14,3,3"
							ButtonBase.Command="{Binding RemoveMappingEntryCommandDescriptions}"
							UIElement.IsEnabled="{Binding ShowMappingsAndOverlay}"
							ToolTip="{l:Translate {x:Static s:StringConsts.STR_REMOVE_DEVICE_FROM_LIST}}" />
					</Grid>
				</StackPanel>
			</Expander>
			<Expander
				FrameworkElement.Name="ExpandMappingPosition"
				FrameworkElement.Margin="0,10,0,0"
				HeaderedContentControl.Header="{l:Translate {x:Static s:StringConsts.STR_OVERLAY_POSITION}}"
				UIElement.IsEnabled="{Binding ShowMappingsAndOverlay}"
				IsExpanded="{Binding ExpandMappingPosition}"
				x:Name="ExpandMappingPosition">
				<StackPanel
					FrameworkElement.Margin="17,0,0,0">
					<comboBoxes:ColoredComboBox
						FrameworkElement.Name="MonitorsCB"
						FrameworkElement.Width="220"
						FrameworkElement.Margin="0,8,0,0"
						FrameworkElement.HorizontalAlignment="Left"
						UIElement.IsEnabled="{Binding ShowMappingsAndOverlay}"
						ItemsControl.ItemsSource="{Binding ParentVM.Monitors}"
						SelectedItem="{Binding SelectedMonitor}"
						UIElement.Visibility="{Binding ParentVM.IsManyMonitors, Converter={converters:BooleanToVisibilityConverter}}"
						x:Name="MonitorsCB" />
					<Grid
						FrameworkElement.HorizontalAlignment="Left">
						<Grid.ColumnDefinitions>
							<ColumnDefinition
								ColumnDefinition.Width="Auto" />
							<ColumnDefinition
								ColumnDefinition.Width="Auto" />
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition
								RowDefinition.Height="Auto" />
							<RowDefinition
								RowDefinition.Height="Auto" />
						</Grid.RowDefinitions>
						<RadioButton
							FrameworkElement.Name="AlignMappingsTopLeft"
							FrameworkElement.Margin="0,0,8,0"
							ContentControl.Content="{l:Translate {x:Static s:StringConsts.STR_OVERLAY_STR_OVERLAY_UPPER_LEFT}}"
							IsChecked="{Binding AlignMappingsTopLeft}"
							x:Name="AlignMappingsTopLeft" />
						<RadioButton
							FrameworkElement.Name="AlignMappingsTopRight"
							Grid.Column="1"
							ContentControl.Content="{l:Translate {x:Static s:StringConsts.STR_OVERLAY_STR_OVERLAY_UPPER_RIGHT}}"
							IsChecked="{Binding AlignMappingsTopRight}"
							x:Name="AlignMappingsTopRight" />
						<RadioButton
							FrameworkElement.Name="AlignMappingsBottomLeft"
							Grid.Row="1"
							FrameworkElement.Margin="0,0,8,0"
							ContentControl.Content="{l:Translate {x:Static s:StringConsts.STR_OVERLAY_STR_OVERLAY_BOTTOM_LEFT}}"
							IsChecked="{Binding AlignMappingsBottomLeft}"
							x:Name="AlignMappingsBottomLeft" />
						<RadioButton
							FrameworkElement.Name="AlignMappingsBottomRight"
							Grid.Row="1"
							Grid.Column="1"
							ContentControl.Content="{l:Translate {x:Static s:StringConsts.STR_OVERLAY_STR_OVERLAY_BOTTOM_RIGHT}}"
							IsChecked="{Binding AlignMappingsBottomRight}"
							x:Name="AlignMappingsBottomRight" />
					</Grid>
				</StackPanel>
			</Expander>
			<Expander
				FrameworkElement.Name="ExpandMappingAdjustment"
				FrameworkElement.Margin="0,10,0,0"
				HeaderedContentControl.Header="{l:Translate {x:Static s:StringConsts.STR_ADJUSTMENTS}}"
				UIElement.IsEnabled="{Binding ShowMappingsAndOverlay}"
				IsExpanded="{Binding ExpandMappingAdjustment}"
				x:Name="ExpandMappingAdjustment">
				<StackPanel
					FrameworkElement.Margin="17,0,0,0">
					<TextBlock
						FrameworkElement.Name="OpacityTB"
						FrameworkElement.Margin="0,10,0,0"
						FrameworkElement.Style="{DynamicResource DTTextBlockStyle}"
						UIElement.IsEnabled="{Binding ShowMappingsAndOverlay}"
						TextBlock.Text="{l:Translate {x:Static s:StringConsts.STR_OVERLAY_OPACITY}}"
						x:Name="OpacityTB" />
					<multiRangeSlider:MultiRangeSlider
						FrameworkElement.Name="OpacitySlider"
						Control.Background="#00FFFFFF"
						Maximum="100"
						Minimum="20"
						ThumbWidth="5"
						Units="%"
						UIElement.IsEnabled="{Binding ShowMappingsAndOverlay}"
						x:Name="OpacitySlider">
						<multiRangeSlider:MultiRangeSlider.Items>
							<multiRangeSlider:MultiRangeSliderItem
								IsThumbHitTestVisible="False"
								LeftValue="20"
								ThumbStyle="{StaticResource {x:Type Thumb}}"
								UIElement.IsEnabled="{Binding ShowMappingsAndOverlay}"
								RightBackground="{Binding VisibilityBrushMappings}"
								ThumbBackground="{Binding VisibilityBrushMappings}" />
							<multiRangeSlider:MultiRangeSliderItem
								IsShowValueInTooltip="True"
								ThumbStyle="{StaticResource {x:Type Thumb}}"
								Header="{l:Translate {x:Static s:StringConsts.STR_VALUE}}"
								UIElement.IsEnabled="{Binding ShowMappingsAndOverlay}"
								LeftValue="{Binding TransparentMappings, Mode=TwoWay}"
								RightBackground="{Binding VisibilityBrushMappingsGrey}"
								RightValue="{Binding TransparentMappings, Mode=TwoWay}"
								ThumbBackground="{Binding VisibilityBrushMappings}" />
							<multiRangeSlider:MultiRangeSliderItem
								IsThumbHitTestVisible="False"
								LeftValue="100"
								RightValue="100"
								ThumbStyle="{StaticResource {x:Type Thumb}}"
								UIElement.IsEnabled="{Binding ShowMappingsAndOverlay}"
								RightBackground="{Binding VisibilityBrushMappingsGrey}"
								ThumbBackground="{Binding VisibilityBrushMappingsGrey}" />
						</multiRangeSlider:MultiRangeSlider.Items>
						<FrameworkElement.Resources>
							<ResourceDictionary>
								<Style
									x:Key="DoubleUpDownMultiRangeItem"
									BasedOn="{StaticResource {x:Type toolkit:DoubleUpDown}}"
									TargetType="{x:Type DoubleUpDown}">
									<Setter
										Property="FrameworkElement.MinWidth"
										Value="70" />
									<Setter
										Property="FrameworkElement.MaxWidth"
										Value="70" />
									<Setter xmlns:primitives="clr-namespace:Xceed.Wpf.Toolkit.Primitives;assembly=Xceed.Wpf.Toolkit.NET5"
										Property="primitives:UpDownBase_x0060_1.ClipValueToMinMax"
										Value="True" />
									<Setter
										Property="UpDownBase_x0060_1.DisplayDefaultValueOnEmptyText"
										Value="True" />
									<Setter xmlns:toolkit="clr-namespace:Xceed.Wpf.Toolkit;assembly=Xceed.Wpf.Toolkit.NET5"
										Property="toolkit:NumericUpDown_x0060_1.FormatString"
										Value="F0" />
									<Setter xmlns:toolkit="clr-namespace:Xceed.Wpf.Toolkit;assembly=Xceed.Wpf.Toolkit.NET5"
										Property="toolkit:CommonNumericUpDown_x0060_1.ParsingNumberStyle"
										Value="Integer" />
									<Setter xmlns:primitives="clr-namespace:Xceed.Wpf.Toolkit.Primitives;assembly=Xceed.Wpf.Toolkit.NET5"
										Property="primitives:InputBase.TextAlignment"
										Value="Right" />
									<Setter
										Property="NumericUpDown_x0060_1.Increment"
										Value="10" />
								</Style>
							</ResourceDictionary>
						</FrameworkElement.Resources>
					</multiRangeSlider:MultiRangeSlider>
					<TextBlock
						FrameworkElement.Margin="0,10,0,0"
						FrameworkElement.Style="{DynamicResource DTTextBlockStyle}"
						UIElement.IsEnabled="{Binding ShowMappingsAndOverlay}"
						TextBlock.Text="{l:Translate {x:Static s:StringConsts.STR_CONFIG_OVERLAY_SIZE}}" />
					<multiRangeSlider:MultiRangeSlider
						Control.Background="#00FFFFFF"
						Maximum="2"
						Minimum="0.5"
						ThumbWidth="5"
						TickFrequency="0.1"
						Units=""
						UIElement.IsEnabled="{Binding ShowMappingsAndOverlay}">
						<multiRangeSlider:MultiRangeSlider.Items>
							<multiRangeSlider:MultiRangeSliderItem
								IsThumbHitTestVisible="False"
								LeftValue="0.5"
								ThumbStyle="{StaticResource {x:Type Thumb}}"
								UIElement.IsEnabled="{Binding ShowMappingsAndOverlay}"
								RightBackground="{Binding VisibilityBrushMappings}"
								ThumbBackground="{Binding VisibilityBrushMappings}" />
							<multiRangeSlider:MultiRangeSliderItem
								IsShowValueInTooltip="True"
								ThumbStyle="{StaticResource {x:Type Thumb}}"
								Header="{l:Translate {x:Static s:StringConsts.STR_VALUE}}"
								UIElement.IsEnabled="{Binding ShowMappingsAndOverlay}"
								LeftValue="{Binding Scale, Mode=TwoWay}"
								RightBackground="{Binding VisibilityBrushMappingsGrey}"
								RightValue="{Binding Scale, Mode=TwoWay}"
								ThumbBackground="{Binding VisibilityBrushMappings}" />
							<multiRangeSlider:MultiRangeSliderItem
								IsThumbHitTestVisible="False"
								LeftValue="2"
								RightValue="2"
								ThumbStyle="{StaticResource {x:Type Thumb}}"
								RightBackground="{Binding VisibilityBrushMappingsGrey}"
								ThumbBackground="{Binding VisibilityBrushMappingsGrey}" />
						</multiRangeSlider:MultiRangeSlider.Items>
						<FrameworkElement.Resources>
							<ResourceDictionary>
								<Style
									x:Key="DoubleUpDownMultiRangeItem"
									BasedOn="{StaticResource {x:Type DoubleUpDown}}"
									TargetType="{x:Type DoubleUpDown}">
									<Setter
										Property="FrameworkElement.MinWidth"
										Value="70" />
									<Setter
										Property="FrameworkElement.MaxWidth"
										Value="70" />
									<Setter
										Property="UpDownBase_x0060_1.ClipValueToMinMax"
										Value="True" />
									<Setter
										Property="UpDownBase_x0060_1.DisplayDefaultValueOnEmptyText"
										Value="True" />
									<Setter
										Property="NumericUpDown_x0060_1.FormatString"
										Value="F1" />
									<Setter
										Property="InputBase.TextAlignment"
										Value="Right" />
									<Setter
										Property="NumericUpDown_x0060_1.Increment"
										Value="0.1" />
								</Style>
							</ResourceDictionary>
						</FrameworkElement.Resources>
					</multiRangeSlider:MultiRangeSlider>
				</StackPanel>
			</Expander>
		</StackPanel>
	</StackPanel>
</UserControl>
