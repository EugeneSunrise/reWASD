<advancedStick:BaseDirectionalAnalogGroupUserControl
	x:Class="reWASDUI.Views.ContentZoneGamepad.AdvancedStick.AdvancedZonesSettings" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:advancedStick="clr-namespace:reWASDUI.Views.ContentZoneGamepad.AdvancedStick" xmlns:attachedBehaviours="clr-namespace:DiscSoft.NET.Common.Utils.AttachedBehaviours;assembly=DiscSoft.NET.Common" xmlns:base1="clr-namespace:reWASDUI.ViewModels.Base" xmlns:buttonBinding="clr-namespace:reWASDUI.Controls.XBBindingControls.ButtonBinding" xmlns:checkBoxes="clr-namespace:DiscSoft.NET.Common.View.Controls.CheckBoxes;assembly=DiscSoft.NET.Common" xmlns:comboBoxes="clr-namespace:DiscSoft.NET.Common.View.Controls.ComboBoxes;assembly=DiscSoft.NET.Common" xmlns:converters="clr-namespace:DiscSoft.NET.Common.Utils.Converters;assembly=DiscSoft.NET.Common" xmlns:converters2="clr-namespace:reWASDUI.Utils.Converters" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:deadZoneSlider="clr-namespace:reWASDUI.Controls.DeadZoneSlider" xmlns:enums="clr-namespace:reWASDCommon.Infrastructure.Enums;assembly=reWASDCommon" xmlns:genericInheritance="clr-namespace:XBEliteWPF.Utils.GenericInheritance;assembly=reWASDCommon" xmlns:l="clr-namespace:DiscSoft.NET.Common.Localization;assembly=DiscSoft.NET.Common" xmlns:licenseFeatureManaging="clr-namespace:reWASDUI.Controls.LicenseFeatureManaging" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:reWasdui="clr-namespace:reWASDUI" xmlns:s="clr-namespace:DTEngine;assembly=DiscSoft.NET.Common" xmlns:xbEliteWpf="clr-namespace:XBEliteWPF">
	<Control.Template>
		<ControlTemplate
			TargetType="{x:Type advancedStick:AdvancedZonesSettings}">
			<StackPanel>
				<buttonBinding:MultiButtonBinding
					x:Name="LeanMappingSelector"
					FrameworkElement.Margin="10,0,10,0"
					IsChangeCurrentBinding="False"
					Title="{l:Translate {x:Static s:StringConsts.STR_LEAN_MAPPING}}"
					ControlsBorderBrush="{Binding GameProfilesService.RealCurrentBeingMappedBindingCollection.CollectionBrush}"
					MappingSelectorIsVisible="{Binding IsChecked, ElementName=shiftModifierCheckBox, Converter={converters:InverseBooleanConverter}}"
					TitleKeyMap="{l:Translate {x:Static s:StringConsts.STR_TO}}"
					ToggleIsVisible="{Binding CurrentButtonToBind, RelativeSource={RelativeSource Self}, Converter={converters2:IsHighZoneConverter}}">
					<UIElement.Visibility>
						<MultiBinding
							Converter="{converters:MultiBooleanAndConverterToVisibilityConverter}">
							<Binding
								Path="GameProfilesService.RealCurrentBeingMappedBindingCollection.CurrentBindingIsGyroTilt" />
							<Binding
								Path="GameProfilesService.CurrentMainBindingCollection.GyroTiltDirectionalGroup.IsGyroMode" />
							<Binding
								Path="GamepadService.CurrentGamepad.CurrentController.HasLean" />
						</MultiBinding>
					</UIElement.Visibility>
					<buttonBinding:MultiButtonBinding.ButtonsToBind>
						<genericInheritance:GamepadButtonsObservableCollection>
							<x:StaticExtension
								Member="enums:GamepadButton.BTN_GYRO_TILT_LEAN_LEFT" />
							<x:StaticExtension
								Member="enums:GamepadButton.BTN_GYRO_TILT_LEAN_RIGHT" />
						</genericInheritance:GamepadButtonsObservableCollection>
					</buttonBinding:MultiButtonBinding.ButtonsToBind>
				</buttonBinding:MultiButtonBinding>
				<StackPanel
					FrameworkElement.Margin="10,0,10,10">
					<StackPanel>
						<UIElement.Visibility>
							<MultiBinding
								Converter="{converters:MultiBooleanAndConverterToVisibilityConverter}">
								<Binding
									Path="GameProfilesService.RealCurrentBeingMappedBindingCollection.IsAdvancedZonesSettingsVisible" />
							</MultiBinding>
						</UIElement.Visibility>
						<StackPanel
							UIElement.Visibility="{Binding DirectionalGroup.IsZonesShapeChangeAllowed, RelativeSource={RelativeSource TemplatedParent}, Converter={converters:BooleanToVisibilityConverter}}">
							<TextBlock
								FrameworkElement.Style="{DynamicResource DTTextBlockControlLabelStyle}"
								UIElement.IsEnabled="{Binding GameProfilesService.CurrentGame.CurrentConfig.IsEditConfigMode}"
								TextBlock.Text="{l:Translate {x:Static s:StringConsts.STR_ZONE_SHAPE}}" />
							<ToggleButton
								Name="toggleEllipticRadial"
								FrameworkElement.Margin="0,0,0,0"
								FrameworkElement.HorizontalAlignment="Left"
								FrameworkElement.Style="{DynamicResource ToggleEllipticRadialSwitch}"
								Control.BorderBrush="{Binding GameProfilesService.RealCurrentBeingMappedBindingCollection.CollectionBrush}"
								Control.Foreground="{Binding GameProfilesService.RealCurrentBeingMappedBindingCollection.CollectionBrush}"
								IsChecked="{Binding DirectionalGroup.IsEllipticZoning, RelativeSource={RelativeSource TemplatedParent}}"
								UIElement.IsEnabled="{Binding GameProfilesService.CurrentGame.CurrentConfig.IsEditConfigMode}" />
						</StackPanel>
						<deadZoneSlider:ZoneMultiSlider
							x:Name="DeadZoneX"
							FrameworkElement.Margin="0,0,0,0"
							LargeChange="100"
							Maximum="32768"
							RightDeadZoneIsHitTestVisible="False"
							RightDeadZoneValue="32768"
							SmallChange="10"
							HighZoneValue="{Binding DirectionalGroup.XHigh, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
							UIElement.IsEnabled="{Binding GameProfilesService.CurrentGame.CurrentConfig.IsEditConfigMode}"
							Label="{Binding DirectionalGroup.ZonesLabelAxisX, RelativeSource={RelativeSource TemplatedParent}}"
							LowZoneIsHitTestVisible="{Binding DirectionalGroup.IsZoneLowAllowed, RelativeSource={RelativeSource TemplatedParent}}"
							LowZoneMinimumValue="{Binding DirectionalGroup.DeadZoneMinimum, RelativeSource={RelativeSource TemplatedParent}}"
							LowZoneValue="{Binding DirectionalGroup.XLow, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
							MedZoneIsHitTestVisible="{Binding DirectionalGroup.IsZoneMedAllowed, RelativeSource={RelativeSource TemplatedParent}}"
							MedZoneValue="{Binding DirectionalGroup.XMed, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
							Minimum="{Binding DirectionalGroup.DeadZoneMinimum, RelativeSource={RelativeSource TemplatedParent}}" />
						<deadZoneSlider:ZoneMultiSlider
							x:Name="DeadZoneY"
							LargeChange="100"
							Maximum="32768"
							RightDeadZoneIsHitTestVisible="False"
							RightDeadZoneValue="32768"
							SmallChange="10"
							HighZoneValue="{Binding DirectionalGroup.YHigh, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
							UIElement.IsEnabled="{Binding GameProfilesService.CurrentGame.CurrentConfig.IsEditConfigMode}"
							Label="{Binding DirectionalGroup.ZonesLabelAxisY, RelativeSource={RelativeSource TemplatedParent}}"
							LowZoneIsHitTestVisible="{Binding DirectionalGroup.IsZoneLowAllowed, RelativeSource={RelativeSource TemplatedParent}}"
							LowZoneMinimumValue="{Binding DirectionalGroup.DeadZoneMinimum, RelativeSource={RelativeSource TemplatedParent}}"
							LowZoneValue="{Binding DirectionalGroup.YLow, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
							MedZoneIsHitTestVisible="{Binding DirectionalGroup.IsZoneMedAllowed, RelativeSource={RelativeSource TemplatedParent}}"
							MedZoneValue="{Binding DirectionalGroup.YMed, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
							Minimum="{Binding DirectionalGroup.DeadZoneMinimum, RelativeSource={RelativeSource TemplatedParent}}">
							<UIElement.Visibility>
								<MultiBinding
									Converter="{converters:MultiBooleanAndConverterToVisibilityConverter}">
									<Binding
										Path="DirectionalGroup.IsEllipticZoning"
										RelativeSource="{RelativeSource TemplatedParent}" />
									<Binding
										Path="DirectionalGroup.IsZonesShapeChangeAllowed"
										RelativeSource="{RelativeSource TemplatedParent}" />
								</MultiBinding>
							</UIElement.Visibility>
						</deadZoneSlider:ZoneMultiSlider>
						<StackPanel
							UIElement.Visibility="{Binding DirectionalGroup.IsHardwareChangesAllowed, RelativeSource={RelativeSource TemplatedParent}, Converter={converters:BooleanToVisibilityConverter}}">
							<licenseFeatureManaging:LicenseFeatureManagingContainer
								AssociatedFeatureGUID="{x:Static reWasdui:App.ADVANCED_MAPPING_FEATURE_GUID}"
								IsFeatureUnlocked="{Binding LicensingService.IsAdvancedMappingFeatureUnlocked}">
								<checkBoxes:FillCheckBox
									FrameworkElement.Name="affectHardwareCb"
									FrameworkElement.Margin="0,10,0,0"
									BulletVerticalAlignment="Center"
									ToolTipService.ShowOnDisabled="True"
									ContentControl.Content="{l:Translate {x:Static s:StringConsts.STR_AFFECT_GAMEPAD_HARDWARE}}"
									IsChecked="{Binding DirectionalGroup.IsHardwareDeadzone, RelativeSource={RelativeSource TemplatedParent}}">
									<UIElement.IsEnabled>
										<MultiBinding
											Converter="{converters:MultiBooleanAndConverter}">
											<Binding
												Path="GameProfilesService.RealCurrentBeingMappedBindingCollection.IsCurrentUnmapped"
												Converter="{converters:InverseBooleanConverter}" />
											<Binding
												Path="GameProfilesService.CurrentGame.CurrentConfig.IsEditConfigMode" />
										</MultiBinding>
									</UIElement.IsEnabled>
									<FrameworkElement.Style>
										<Style
											BasedOn="{StaticResource ShiftColoredCheckBox}"
											TargetType="{x:Type checkBoxes:FillCheckBox}">
											<Style.Triggers>
												<MultiDataTrigger>
													<MultiDataTrigger.Conditions>
														<Condition
															Value="False"
															Binding="{Binding GameProfilesService.CurrentGame.CurrentConfig.IsEditConfigMode}" />
														<Condition
															Value="False"
															Binding="{Binding LicensingService.IsAdvancedMappingFeatureUnlocked}" />
													</MultiDataTrigger.Conditions>
													<Setter
														Property="FrameworkElement.ToolTip"
														Value="{l:Translate {x:Static s:StringConsts.STR_FEATURE_LOCKED_GOTO_LICENSE}}" />
												</MultiDataTrigger>
												<MultiDataTrigger>
													<MultiDataTrigger.Conditions>
														<Condition
															Value="False"
															Binding="{Binding GameProfilesService.CurrentGame.CurrentConfig.IsEditConfigMode}" />
														<Condition
															Value="True"
															Binding="{Binding LicensingService.IsAdvancedMappingFeatureUnlocked}" />
													</MultiDataTrigger.Conditions>
													<Setter
														Property="ToolTipService.IsEnabled"
														Value="False" />
												</MultiDataTrigger>
												<MultiDataTrigger>
													<MultiDataTrigger.Conditions>
														<Condition
															Value="True"
															Binding="{Binding GameProfilesService.CurrentGame.CurrentConfig.IsEditConfigMode}" />
														<Condition
															Value="False"
															Binding="{Binding LicensingService.IsAdvancedMappingFeatureUnlocked}" />
													</MultiDataTrigger.Conditions>
													<Setter
														Property="FrameworkElement.ToolTip"
														Value="{l:Translate {x:Static s:StringConsts.STR_FEATURE_LOCKED_GOTO_LICENSE}}" />
												</MultiDataTrigger>
												<MultiDataTrigger>
													<MultiDataTrigger.Conditions>
														<Condition
															Value="True"
															Binding="{Binding GameProfilesService.CurrentGame.CurrentConfig.IsEditConfigMode}" />
														<Condition
															Value="True"
															Binding="{Binding LicensingService.IsAdvancedMappingFeatureUnlocked}" />
													</MultiDataTrigger.Conditions>
													<Setter
														Property="FrameworkElement.ToolTip"
														Value="{l:Translate {x:Static s:StringConsts.STR_TT_HW_DEADZONE}}" />
												</MultiDataTrigger>
											</Style.Triggers>
										</Style>
									</FrameworkElement.Style>
								</checkBoxes:FillCheckBox>
							</licenseFeatureManaging:LicenseFeatureManagingContainer>
						</StackPanel>
					</StackPanel>
					<StackPanel
						UIElement.Visibility="{Binding DirectionalGroup.IsZonesDirectionAllowed, RelativeSource={RelativeSource TemplatedParent}, Converter={converters:BooleanToVisibilityConverter}}">
						<TextBlock
							Name="tbLabel"
							FrameworkElement.Style="{DynamicResource DTTextBlockControlLabelStyle}"
							TextBlock.Text="{l:Translate {x:Static s:StringConsts.STR_DIRECTION}}" />
						<comboBoxes:ColoredComboBox
							Name="cmbDirections"
							BlockKeyboardEvents="True"
							ItemsControl.ItemTemplate="{DynamicResource LocalizedDescriptionDataTemplate}"
							FrameworkElement.Style="{DynamicResource ShiftColoredComboBox}"
							ItemsControl.ItemsSource="{Binding DirectionalGroup.AllowedDirections, RelativeSource={RelativeSource TemplatedParent}}"
							SelectedItem="{Binding DirectionalGroup.CurrentSelectedDirection, RelativeSource={RelativeSource TemplatedParent}}" />
					</StackPanel>
					<buttonBinding:MultiButtonBinding
						x:Name="ZoneSelector"
						Title="{l:Translate {x:Static s:StringConsts.STR_ZONE}}"
						ButtonsToBind="{Binding DirectionalGroup.FilteredZoneButtons, RelativeSource={RelativeSource TemplatedParent}}"
						ControlsBorderBrush="{Binding GameProfilesService.RealCurrentBeingMappedBindingCollection.CollectionBrush}"
						CurrentButtonToBind="{Binding DirectionalGroup.CurrentSelectedZoneButton, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
						MappingSelectorIsVisible="{Binding IsChecked, ElementName=shiftModifierCheckBox, Converter={converters:InverseBooleanConverter}}"
						TitleKeyMap="{l:Translate {x:Static s:StringConsts.STR_TO}}"
						ToggleIsVisible="{Binding CurrentButtonToBind, RelativeSource={RelativeSource Self}, Converter={converters2:IsHighZoneConverter}}" />
				</StackPanel>
			</StackPanel>
		</ControlTemplate>
	</Control.Template>
</advancedStick:BaseDirectionalAnalogGroupUserControl>
