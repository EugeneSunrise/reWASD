<bindingAnnotation:BaseXBBindingAnnotation
	x:Class="reWASDUI.Controls.XBBindingControls.BindingAnnotation.GamepadBindingAnnotationText" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:converters="clr-namespace:DiscSoft.NET.Common.Utils.Converters;assembly=DiscSoft.NET.Common" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:enums="clr-namespace:reWASDCommon.Infrastructure.Enums;assembly=reWASDCommon" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:bindingAnnotation="clr-namespace:reWASDUI.Controls.XBBindingControls.BindingAnnotation" xmlns:activatorXb="clr-namespace:reWASDUI.Infrastructure.KeyBindings.ActivatorXB" xmlns:converters1="clr-namespace:reWASDUI.Utils.Converters"
	UIElement.Focusable="False">
	<FrameworkElement.Style>
		<Style
			TargetType="{x:Type bindingAnnotation:GamepadBindingAnnotationText}">
			<Setter
				Property="bindingAnnotation:BaseXBBindingAnnotation.AnnotationRecolorBrush"
				Value="{Binding GameProfilesService.RealCurrentBeingMappedBindingCollection.CollectionBrush, RelativeSource={RelativeSource Self}}" />
			<Setter
				Property="Control.Template">
				<Setter.Value>
					<ControlTemplate
						TargetType="{x:Type bindingAnnotation:GamepadBindingAnnotationText}">
						<FrameworkTemplate.Resources>
							<ResourceDictionary>
								<DataTemplate
									x:Key="ActivatorXBBindingDataEmptyTemplate"
									DataType="activatorXb:ActivatorXBBinding" />
								<DataTemplate
									x:Key="ActivatorXBBindingDataTemplate"
									DataType="activatorXb:ActivatorXBBinding">
									<bindingAnnotation:ActivatorAnnotation
										ActivatorXBBinding="{Binding}"
										IsLabelMode="{Binding GameProfilesService.RealCurrentBeingMappedBindingCollection.IsLabelModeView, FallbackValue=false, RelativeSource={RelativeSource FindAncestor, AncestorType=bindingAnnotation:GamepadBindingAnnotationText}}">
										<FrameworkElement.Style>
											<Style
												TargetType="{x:Type bindingAnnotation:ActivatorAnnotation}">
												<Setter
													Property="bindingAnnotation:ActivatorAnnotation.IsShowActivatorContent">
													<Setter.Value>
														<MultiBinding
															Converter="{converters1:IsShowActivatorContentConverter}">
															<Binding
																Path="XBBinding.CurrentActivatorXBBinding.ActivatorType"
																RelativeSource="{RelativeSource FindAncestor, AncestorType=bindingAnnotation:GamepadBindingAnnotationText}" />
															<Binding
																Path="ActivatorType" />
															<Binding
																Path="GameProfilesService.RealCurrentBeingMappedBindingCollection.IsExpandActivatorsView"
																FallbackValue="False"
																RelativeSource="{RelativeSource FindAncestor, AncestorType=bindingAnnotation:GamepadBindingAnnotationText}" />
														</MultiBinding>
													</Setter.Value>
												</Setter>
												<Setter
													Property="Control.Foreground"
													Value="{Binding AnnotationRecolorBrush, RelativeSource={RelativeSource FindAncestor, AncestorType=bindingAnnotation:GamepadBindingAnnotationText}}" />
												<Style.Triggers>
													<DataTrigger
														Value="True"
														Binding="{Binding ShowAsTooltip, RelativeSource={RelativeSource FindAncestor, AncestorType=bindingAnnotation:GamepadBindingAnnotationText}}">
														<Setter
															Property="bindingAnnotation:ActivatorAnnotation.IsShowActivatorContent"
															Value="True" />
														<Setter
															Property="FrameworkElement.Margin"
															Value="0,2" />
													</DataTrigger>
													<DataTrigger
														Value="False"
														Binding="{Binding GameProfilesService.CurrentGame.CurrentConfig.IsEditConfigMode, RelativeSource={RelativeSource FindAncestor, AncestorType=bindingAnnotation:GamepadBindingAnnotationText}}">
														<Setter
															Property="UIElement.Opacity"
															Value="0.7" />
													</DataTrigger>
												</Style.Triggers>
											</Style>
										</FrameworkElement.Style>
									</bindingAnnotation:ActivatorAnnotation>
								</DataTemplate>
								<Style
									x:Key="ActivatorContent"
									TargetType="{x:Type ContentControl}">
									<Setter
										Property="ContentControl.Content"
										Value="{Binding}" />
									<Setter
										Property="UIElement.Visibility"
										Value="Collapsed" />
									<Setter
										Property="ContentControl.ContentTemplate"
										Value="{StaticResource ActivatorXBBindingDataTemplate}" />
									<Style.Triggers>
										<DataTrigger
											Value="True"
											Binding="{Binding IsActivatorVisible}">
											<Setter
												Property="UIElement.Visibility"
												Value="Visible" />
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</ResourceDictionary>
						</FrameworkTemplate.Resources>
						<StackPanel
							Name="stackPanel"
							Orientation="Horizontal"
							DataContext="{Binding XBBinding.ActivatorXBBindingDictionary, RelativeSource={RelativeSource TemplatedParent}}"
							UIElement.Visibility="{Binding HasItems, FallbackValue=Collapsed, Converter={converters:BooleanToVisibilityConverter}}">
							<ContentControl
								FrameworkElement.Style="{StaticResource ActivatorContent}"
								DataContext="{Binding ConverterParameter='{x:Static enums:ActivatorType.Single}', Converter={converters:BindToDictionaryWithKeyConverter}}" />
							<ContentControl
								FrameworkElement.Style="{StaticResource ActivatorContent}"
								DataContext="{Binding ConverterParameter='{x:Static enums:ActivatorType.Long}', Converter={converters:BindToDictionaryWithKeyConverter}}" />
							<ContentControl
								FrameworkElement.Style="{StaticResource ActivatorContent}"
								DataContext="{Binding ConverterParameter='{x:Static enums:ActivatorType.Double}', Converter={converters:BindToDictionaryWithKeyConverter}}" />
							<ContentControl
								FrameworkElement.Style="{StaticResource ActivatorContent}"
								DataContext="{Binding ConverterParameter='{x:Static enums:ActivatorType.Triple}', Converter={converters:BindToDictionaryWithKeyConverter}}" />
							<ContentControl
								FrameworkElement.Style="{StaticResource ActivatorContent}"
								DataContext="{Binding ConverterParameter='{x:Static enums:ActivatorType.Start}', Converter={converters:BindToDictionaryWithKeyConverter}}" />
							<ContentControl
								FrameworkElement.Style="{StaticResource ActivatorContent}"
								DataContext="{Binding ConverterParameter='{x:Static enums:ActivatorType.Release}', Converter={converters:BindToDictionaryWithKeyConverter}}" />
						</StackPanel>
						<ControlTemplate.Triggers>
							<Trigger
								Property="bindingAnnotation:GamepadBindingAnnotationText.ShowAsTooltip"
								Value="True">
								<Setter
									TargetName="stackPanel"
									Property="StackPanel.Orientation"
									Value="Vertical" />
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			<Style.Triggers>
				<DataTrigger
					Value="True"
					Binding="{Binding XBBinding.IsInheritedBinding, RelativeSource={RelativeSource Self}}">
					<Setter
						Property="bindingAnnotation:BaseXBBindingAnnotation.AnnotationRecolorBrush"
						Value="{DynamicResource DisabledButtonForeground}" />
				</DataTrigger>
				<Trigger
					Property="UIElement.IsEnabled"
					Value="False">
					<Setter
						Property="UIElement.Opacity"
						Value="0.8" />
				</Trigger>
			</Style.Triggers>
		</Style>
	</FrameworkElement.Style>
</bindingAnnotation:BaseXBBindingAnnotation>
